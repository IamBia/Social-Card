{"version":3,"sources":["components/Card.js","App.js","serviceWorker.js","index.js"],"names":["Radium","props","p","fontSize","useState","count","likeBtn","likeBtnClicked","btnClicked","e","preventDefault","newCount","console","log","className","style","border","borderRadius","margin","backgroundColor","height","display","alignItems","justifyContent","borderTopLeftRadius","borderTopRightRadius","padding","color","textAlign","quote","author","profession","nationality","href","target","rel","textDecoration","cursor","onClick","App","id","map","info","key","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iQAkFmBA,eA/EN,SAACC,GAEV,IAsBMC,EAAI,CACNC,SAAU,QAzBM,EA8CcC,mBAAS,CACvCC,MAAO,IA/CS,mBA8CbC,EA9Ca,KA8CJC,EA9CI,KAkDdC,EAAa,SAACC,GAChBA,EAAEC,iBACF,IAAIC,EAAWL,EAAQD,MAAQ,EAC/BE,EAAe,CACXF,MAAOM,KAKf,OAFAC,QAAQC,IAAIL,GAGR,yBAAKM,UAAU,OAAOC,MA1Db,CACTC,OAAQ,iBACRC,aAAc,OACdC,OAAQ,cAwDJ,yBAAKJ,UAAU,eAAeC,MAtDvB,CACXI,gBAAiB,UACjBC,OAAQ,QACRC,QAAS,OACTC,WAAY,SACZC,eAAgB,SAChBC,oBAAqB,OACrBC,qBAAsB,OACtBC,QAAS,SA+CD,wBAAIX,MA5CL,CACPY,MAAO,QACPC,UAAW,SACXzB,SAAU,SAyCcF,EAAM4B,QAE1B,yBAAKf,UAAU,aAAaC,MApCvB,CACTW,QAAS,SAoCD,4BAAKzB,EAAM6B,QACX,uBAAGf,MAAOb,GAAID,EAAM8B,YACpB,uBAAGhB,MAAOb,GAAV,IAAeD,EAAM+B,YAArB,KACA,uBAAGC,KAAK,gCAAgCC,OAAO,SAASC,IAAI,sBAAsBpB,MApCjF,CACTqB,eAAgB,OAChBT,MAAO,OACPxB,SAAU,SAiCF,YAEJ,yBAAKW,UAAU,+CACX,uBAAGC,MAjCD,CACVY,MAAO,MACP,SAAS,CACLA,MAAO,MACPU,OAAQ,YA6BaJ,KAAK,KAClB,uBAAGnB,UAAU,eAAewB,QAAS9B,GAArC,IAAoDF,EAAQD,MAA5D,WCHLkC,MApEf,WA0CE,OACE,yBAAKzB,UAAU,OACf,yBAAKA,UAAU,kBACf,yBAAKA,UAAU,0CACf,uCAEA,yBAAKA,UAAU,OA/CN,CACT,CACI0B,GAAI,EACJX,MAAO,8CACPG,YAAa,YACbD,WAAY,eACZD,OAAQ,2BAEZ,CACIU,GAAI,EACJX,MAAO,qIACPG,YAAa,SACbD,WAAY,QACZD,OAAQ,wBAEZ,CACIU,GAAI,EACJX,MAAO,4CACPG,YAAa,UACbD,WAAY,YACZD,OAAQ,mBACN,CACFU,GAAI,EACJX,MAAO,6CACPG,YAAa,UACbD,WAAY,WACZD,OAAQ,mBACN,CACFU,GAAI,EACJX,MAAO,0GACPG,YAAa,WACbD,WAAY,YACZD,OAAQ,gBACN,CACFU,GAAI,EACJX,MAAO,uDACPG,YAAa,WACbD,WAAY,UACZD,OAAQ,iBAWCW,KAAI,SAACC,GAAD,OACV,yBAAK5B,UAAU,aAAa6B,IAAKD,EAAKF,IACrC,kBAAC,EAAD,CACEX,MAAOa,EAAKb,MACZG,YAAaU,EAAKV,YAClBD,WAAYW,EAAKX,WACjBD,OAAQY,EAAKZ,OACba,IAAKD,EAAKF,aCjDJI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.aa76d8a0.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Radium from 'radium';\n\nconst Card = (props) => {\n    \n    const card = {\n        border: '1px solid #eee',\n        borderRadius: '10px',\n        margin: '10px 20px'\n    }\n    const header = {\n        backgroundColor: '#0984e3',\n        height: '200px',\n        display: 'flex',\n        alignItems: 'center',\n        justifyContent: 'center',\n        borderTopLeftRadius: '10px',\n        borderTopRightRadius: '10px',\n        padding: '15px'\n    }\n    \n    const h1 = {\n        color: 'white',\n        textAlign: 'center',\n        fontSize: '18px'\n        \n    }\n    const p = {\n        fontSize: '14px'\n    }\n    \n    const body = {\n        padding: '10px'\n    }\n    \n    const link = {\n        textDecoration: 'none',\n        color: '#aaa',\n        fontSize: '14px'\n    }\n\n    const heart = {\n        color: 'red',\n        ':hover':{\n            color: 'red',\n            cursor: 'pointer'\n        }\n    }\n\n    const [likeBtn, likeBtnClicked] = useState({\n        count: 0\n        })\n\n    const btnClicked = (e) => {\n        e.preventDefault();\n        let newCount = likeBtn.count + 1;\n        likeBtnClicked({\n            count: newCount\n        })\n    }\n    console.log(btnClicked)\n    \n    return(\n        <div className=\"card\" style={card}>\n            <div className=\"card__header\" style={header}>\n                <h1 style={h1}>{props.quote}</h1>\n            </div>\n            <div className=\"card__body\" style={body}>\n                <h2>{props.author}</h2>\n                <p style={p}>{props.profession}</p>\n                <p style={p}> {props.nationality} </p>\n                <a href=\"https://instagram.com/bia.dev\" target='_blank' rel=\"noopener noreferrer\" style={link}>bia.dev</a>\n            </div>\n            <div className=\"card__footer d-flex justify-content-end p-2\">\n                <a style={heart} href=\"#\">\n                    <i className=\"fas fa-heart\" onClick={btnClicked} > {likeBtn.count} </i>\n                </a>\n            </div>\n        </div>\n        )\n    }\n    \n    export default Radium(Card);","import React from 'react';\nimport './App.css';\nimport Card from './components/Card';\n\nfunction App() {\n  let Data = [\n    {\n        id: 1,\n        quote: 'Goals transform a random walk into a chase.',\n        nationality: 'Hungarian',\n        profession: 'Psychologist',\n        author: 'Mihaly Csikszentmihalyi'\n    },\n    {\n        id: 2,\n        quote: 'Everything happening around me is very random. I am enjoying the phase, as the journey is far more enjoyable than the destination.',\n        nationality: 'Indian',\n        profession: 'Actor',\n        author: 'Sushant Singh Rajput'\n    },\n    {\n        id: 3,\n        quote: 'Natural selection is anything but random.',\n        nationality: 'English',\n        profession: 'Scientist',\n        author: 'Richard Dawkins'\n    },    {\n        id: 4,\n        quote: 'I take random inspiration from everywhere.',\n        nationality: 'British',\n        profession: 'Designer',\n        author: 'Edward Enninful'\n    },    {\n        id: 5,\n        quote: 'There are no secrets to success. It is the result of preparation, hard work, and learning from failure.',\n        nationality: 'American',\n        profession: 'Statesman',\n        author: 'Colin Powell'\n    },    {\n        id: 6,\n        quote: 'With hard work and dedication, anything is possible.',\n        nationality: 'American',\n        profession: 'Athlete',\n        author: 'Timothy Weah'\n    }\n]\n  return (\n    <div className=\"App\">\n    <div className=\"container mb-5\">\n    <div className=\"row d-flex justify-content-center py-5\">\n    <h1>Quotes</h1>\n    </div>\n    <div className=\"row\">\n\n           {Data.map((info) => \n           <div className=\"col-4 my-2\" key={info.id}>\n            <Card \n              quote={info.quote} \n              nationality={info.nationality} \n              profession={info.profession}\n              author={info.author}\n              key={info.id}/>\n              </div>\n            )}\n\n   </div>\n   </div>\n   </div>\n   \n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}